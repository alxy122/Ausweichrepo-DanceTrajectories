import xml.etree.ElementTree as ET
import numpy as np
from scipy.interpolate import interp1d

num_frames = 2480
num_dancers = 16

points0 = [
    (2, -2, 0),
    (2, -2, 531),
    (2, 0, 575),
    (2, 0, 845),
    (-2.5, -2, 980),
    (-2.5, -2, 1130),
    (-1, -1.5, 1256),
    (-1, -1.5, 1318),
    (0, -1, 1386),
    (0, -1, 1718),
    (-1, -3, 1907),
    (2, 1, 2053),
    (3, 4, 2140),
    (3, 3.5, 2214),
    (-1.5, 3, 2443),
    (-1.5, 3, 2480),
]
points1 = [
    (0.5, -2, 0),
    (0.5, -2, 531),
    (0.5, 0, 575),
    (0.5, 0, 845),
    (0.5, 1, 980),
    (0.5, 1, 1130),
    (0.5, -1.5, 1256),
    (0.5, -1.5, 1318),
    (0, -1, 1386),
    (0, -1, 1718),
    (-1, -3, 1907),
    (2, 1, 2053),
    (3, 4, 2140),
    (3, 3.5, 2214),
    (-1.5, 3, 2443),
    (-1.5, 3, 2480),
]
points2 = [
    (-1, -2, 0),
    (-1, -2, 531),
    (-1, 0, 575),
    (-1, 0, 845),
    (-4.5, -2, 980),
    (-4.5, -2, 1130),
    (-4, -1.5, 1256),
    (-4, -1.5, 1318),
    (-3, -1, 1386),
    (-3, -1, 1718),
    (-5, -3, 1907),
    (-2, 1, 2053),
    (1, 3, 2140),
    (1, 2.5, 2214),
    (-2.5, 2, 2443),
    (-2.5, 2, 2480),
]
points3 = [
    (-2.5, -2, 0),
    (-2.5, -2, 531),
    (-2.5, 0, 575),
    (-2.5, 0, 845),
    (-1.5, 1, 980),
    (-1.5, 1, 1130),
    (-2.5, -1.5, 1256),
    (-2.5, -1.5, 1318),
    (-3, -1, 1386),
    (-3, -1, 1718),
    (-5, -3, 1907),
    (-2, 1, 2053),
    (1, 3, 2140),
    (1, 2.5, 2214),
    (-2.5, 2, 2443),
    (-2.5, 2, 2480),
]

points4 = [
    (2, -3.5, 0),
    (2, -3.5, 531),
    (2, -1.5, 575),
    (2, -1.5, 845),
    (1.5, 0.5, 980),
    (1.5, 0.5, 1130),
    (-1, -2.5, 1256),
    (-1, -2.5, 1318),
    (-1.5, -2, 1386),
    (-1.5, -2, 1718),
    (-2, -4, 1907),
    (1, 0, 2053),
    (3, 3, 2140),
    (3, 2.5, 2214),
    (-0.5, 2, 2443),
    (-0.5, 2, 2480),
]
points5 = [
    (0.5, -3.5, 0),
    (0.5, -3.5, 531),
    (0.5, -1.5, 575),
    (0.5, -1.5, 845),
    (-3.5, -2.5, 980),
    (-3.5, -2.5, 1130),
    (-2.5, -2.5, 1256),
    (-2.5, -2.5, 1318),
    (-1.5, -2, 1386),
    (-1.5, -2, 1718),
    (-2, -4, 1907),
    (1, 0, 2053),
    (3, 3, 2140),
    (3, 2.5, 2214),
    (-0.5, 2, 2443),
    (-0.5, 2, 2480),
]
points6 = [
    (-1, -3.5, 0),
    (-1, -3.5, 531),
    (-1, -1.5, 575),
    (-1, -1.5, 845),
    (-0.5, 0.5, 980),
    (-0.5, 0.5, 1130),
    (-4, -2.5, 1256),
    (-4, -2.5, 1318),
    (-4.5, -2, 1386),
    (-4.5, -2, 1718),
    (-6, -4, 1907),
    (-3, 0, 2053),
    (-1, 2, 2140),
    (1, 1.5, 2214),
    (-1.5, 1, 2443),
    (-1.5, 1, 2480),
]
points7 = [
    (-2.5, -3.5, 0),
    (-2.5, -3.5, 531),
    (-2.5, -1.5, 575),
    (-2.5, -1.5, 845),
    (-5.5, -2.5, 980),
    (-5.5, -2.5, 1130),
    (-5.5, -2.5, 1256),
    (-5.5, -2.5, 1318),
    (-4.5, -2, 1386),
    (-4.5, -2, 1718),
    (-6, -4, 1907),
    (-3, 0, 2053),
    (-1, 2, 2140),
    (1, 1.5, 2214),
    (-1.5, 1, 2443),
    (-1.5, 1, 2480),
]

points8 = [
    (2, -5, 0),
    (2, -5, 531),
    (2, -3, 575),
    (2, -3, 845),
    (-2.5, -3, 980),
    (-2.5, -3, 1130),
    (-1, -3.5, 1256),
    (-1, -3.5, 1318),
    (0, -3, 1386),
    (0, -3, 1718),
    (0, -4, 1907),
    (3, 0, 2053),
    (5, 3, 2140),
    (5, 2.5, 2214),
    (1.5, 2, 2443),
    (1.5, 2, 2480),
]
points9 = [
    (0.5, -5, 0),
    (0.5, -5, 531),
    (0.5, -3, 575),
    (0.5, -3, 845),
    (0.5, 0, 980),
    (0.5, 0, 1130),
    (0.5, -3.5, 1256),
    (0.5, -3.5, 1318),
    (0, -3, 1386),
    (0, -3, 1718),
    (0, -4, 1907),
    (3, 0, 2053),
    (5, 3, 2140),
    (5, 2.5, 2214),
    (1.5, 2, 2443),
    (1.5, 2, 2480),
]
points10 = [
    (-1, -5, 0),
    (-1, -5, 531),
    (-1, -3, 575),
    (-1, -3, 845),
    (-4.5, -3, 980),
    (-4.5, -3, 1130),
    (-4, -3.5, 1256),
    (-4, -3.5, 1318),
    (-3, -3, 1386),
    (-3, -3, 1718),
    (-4, -4, 1907),
    (-1, 0, 2053),
    (1, 2, 2140),
    (3, 1.5, 2214),
    (0.5, 1, 2443),
    (0.5, 1, 2480),
]
points11 = [
    (-2.5, -5, 0),
    (-2.5, -5, 531),
    (-2.5, -3, 575),
    (-2.5, -3, 845),
    (-1.5, 0, 980),
    (-1.5, 0, 1130),
    (-2.5, -3.5, 1256),
    (-2.5, -3.5, 1318),
    (-3, -3, 1386),
    (-3, -3, 1718),
    (-4, -4, 1907),
    (-1, 0, 2053),
    (1, 2, 2140),
    (3, 1.5, 2214),
    (0.5, 1, 2443),
    (0.5, 1, 2480),
]

points12 = [
    (2, -6.5, 0),
    (2, -6.5, 531),
    (2, -4.5, 575),
    (2, -4.5, 845),
    (1.5, -0.5, 980),
    (1.5, -0.5, 1130),
    (-1, -4.5, 1256),
    (-1, -4.5, 1318),
    (-1.5, -4, 1386),
    (-1.5, -4, 1718),
    (-1, -5, 1907),
    (2, -1, 2053),
    (3, 2, 2140),
    (5, 1.5, 2214),
    (2.5, 1, 2443),
    (2.5, 1, 2480),
]
points13 = [
    (0.5, -6.5, 0),
    (0.5, -6.5, 531),
    (0.5, -4.5, 575),
    (0.5, -4.5, 845),
    (-3.5, -3.5, 980),
    (-3.5, -3.5, 1130),
    (-2.5, -4.5, 1256),
    (-2.5, -4.5, 1318),
    (-1.5, -4, 1386),
    (-1.5, -4, 1718),
    (-1, -5, 1907),
    (2, -1, 2053),
    (3, 2, 2140),
    (5, 1.5, 2214),
    (2.5, 1, 2443),
    (2.5, 1, 2480),
]
points14 = [
    (-1, -6.5, 0),
    (-1, -6.5, 531),
    (-1, -4.5, 575),
    (-1, -4.5, 845),
    (-0.5, -0.5, 980),
    (-0.5, -0.5, 1130),
    (-4, -4.5, 1256),
    (-4, -4.5, 1318),
    (-4.5, -4, 1386),
    (-4.5, -4, 1718),
    (-5, -5, 1907),
    (-2, -1, 2053),
    (1, 1, 2140),
    (3, 0.5, 2214),
    (1.5, 0, 2443),
    (1.5, 0, 2480),
]
points15 = [
    (-2.5, -6.5, 0),
    (-2.5, -6.5, 531),
    (-2.5, -4.5, 575),
    (-2.5, -4.5, 845),
    (-5.5, -3.5, 980),
    (-5.5, -3.5, 1130),
    (-5.5, -4.5, 1256),
    (-5.5, -4.5, 1318),
    (-4.5, -4, 1386),
    (-4.5, -4, 1718),
    (-5, -5, 1907),
    (-2, -1, 2053),
    (1, 1, 2140),
    (3, 0.5, 2214),
    (1.5, 0, 2443),
    (1.5, 0, 2480),
]


def interpolate(points):
    x_points, y_points, frame_points = zip(*points)
    x_interp = interp1d(frame_points, x_points, kind="linear", fill_value="extrapolate")
    y_interp = interp1d(frame_points, y_points, kind="linear", fill_value="extrapolate")

    interpolated_frames = np.arange(frame_points[0], frame_points[-1] + 1)
    # interpolated_frames = [i for i in range(1, num_frames + 1)]

    interpolated_x = x_interp(interpolated_frames)
    interpolated_y = y_interp(interpolated_frames)

    return list(zip(interpolated_x, interpolated_y, interpolated_frames))


# Create the root element
data = ET.Element("data")

# Create the 'file' element
file_elem = ET.SubElement(data, "file")
file_elem.set("id", "0")
file_elem.set("name", "Information")

# Create 'attribute' elements for the file
attributes = [
    ("NUMFRAMES", str(num_frames)),
    ("H-FRAME-SIZE", "1920"),
    ("V-FRAME-SIZE", "1080"),
]

for attr_name, attr_value in attributes:
    attr_elem = ET.SubElement(file_elem, "attribute")
    attr_elem.set("name", attr_name)

    dvalue_elem = ET.SubElement(attr_elem, "dvalue")
    dvalue_elem.set("value", attr_value)

# Create 'object' elements

for i in range(num_dancers):
    object_elem = ET.SubElement(data, "object")
    object_elem.set("id", str(i))
    object_elem.set("framespan", f"0:{num_frames}")
    object_elem.set("name", f"Paar{1+(i // 2)}")

    bbox_elem = ET.SubElement(object_elem, "attribute")
    bbox_elem.set("name", "BoundingBox")

    for point in interpolate(globals()[f"points{i}"]):
        bbox_data_elem = ET.SubElement(bbox_elem, "dancerPos")
        bbox_data_elem.set("x", str(point[0]))
        bbox_data_elem.set("y", str(point[1]))
        bbox_data_elem.set("frame", str(point[2]))

# Create an ElementTree object
tree = ET.ElementTree(data)

# Save the XML to a file
tree.write("interpolatedFormations.xml", encoding="utf-8", xml_declaration=True)

print("XML structure has been created and saved to 'output.xml'.")
